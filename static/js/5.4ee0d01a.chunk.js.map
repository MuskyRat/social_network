{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Main/Chat/Chat.module.css","redux/chat-selectors.ts","components/Main/Chat/Chat.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","module","exports","selectMessages","chat","messages","selectStatus","status","Messages","useSelector","useState","autoScroll","setAutoScroll","messagesAnchorRef","useRef","useEffect","current","scrollIntoView","behavior","className","style","messagesWrapper","onScroll","e","event","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","message","id","ref","React","memo","console","log","info","userId","src","photo","userPhoto","alt","userName","text","AddChatMessageForm","compose","dispatch","useDispatch","startMessagesListening","stopMessagesListening","wrapper","error","Preloader","setMessage","onSendMessage","sendMessage","showEmojiPicker","setShowEmojiPicker","chosenEmoji","setChosenEmoji","emoji","formWrapper","textarea","value","onChange","placeholder","onKeyPress","ctrlKey","code","emojiEyes","emojiSmiley","onClick","classNames","emojiButton","emojiButtonPressed","button","disabled","emojiPicker","onEmojiClick","emojiObject"],"mappings":"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","file":"static/js/5.4ee0d01a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\ntype StatePropsType = ReturnType<typeof mapStateToProps>;\r\n\r\ntype DispatchPropsType = {};\r\n\r\ntype PropsType = StatePropsType & DispatchPropsType;\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<PropsType> = (props) => {\r\n        const {isAuth, ...restProps} = props;\r\n        if(!isAuth) return <Redirect to={'/login'} />\r\n        return (\r\n            <WrappedComponent {...restProps as WCP} />\r\n        )\r\n\r\n    }\r\n\r\n    return connect<StatePropsType, DispatchPropsType, WCP, AppStateType>(mapStateToProps, {})(RedirectComponent);\r\n\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Chat_wrapper__3fGQ9\",\"messagesWrapper\":\"Chat_messagesWrapper__2iFkB\",\"messages\":\"Chat_messages__2p89K\",\"message\":\"Chat_message__12M5P\",\"info\":\"Chat_info__fDvrh\",\"text\":\"Chat_text__17Zs8\",\"formWrapper\":\"Chat_formWrapper__33u15\",\"textarea\":\"Chat_textarea__1VdWI\",\"button\":\"Chat_button__18lV7\",\"emoji\":\"Chat_emoji__DSF8w\",\"emojiEyes\":\"Chat_emojiEyes__2uyrU\",\"emojiSmiley\":\"Chat_emojiSmiley__17pYA\",\"emojiButton\":\"Chat_emojiButton__1h9um\",\"emojiButtonPressed\":\"Chat_emojiButtonPressed__2bS27\",\"emojiPicker\":\"Chat_emojiPicker__2WrgA\"};","import {AppStateType} from \"./redux-store\";\r\n\r\n\r\nexport const selectMessages = (state: AppStateType) => {\r\n    return state.chat.messages;\r\n};\r\n\r\nexport const selectStatus = (state: AppStateType) => {\r\n    return state.chat.status;\r\n};","import React, {ChangeEvent, useEffect, useRef, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport style from './Chat.module.css';\r\nimport {selectMessages, selectStatus} from \"../../../redux/chat-selectors\";\r\nimport {ChatMessageType, sendMessage, startMessagesListening, stopMessagesListening} from \"../../../redux/chat-reducer\";\r\nimport userPhoto from '../../../assets/userPhoto.png';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport classNames from 'classnames';\r\nimport Picker, {IEmojiData} from 'emoji-picker-react';\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const status = useSelector(selectStatus);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const messages = useSelector(selectMessages);\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening());\r\n        return () => {\r\n            dispatch(stopMessagesListening());\r\n        }\r\n    }, []);\r\n\r\n    if(!messages) return <Preloader />\r\n\r\n    return (\r\n        <div className={style.wrapper}>\r\n            {status === 'error' && <div className={style.error}>Some error occurred. Please Refresh the page.</div>}\r\n            <Messages />\r\n            <AddChatMessageForm />\r\n        </div>\r\n    )\r\n};\r\n\r\nconst Messages: React.FC = () => {\r\n\r\n    const messages = useSelector(selectMessages);\r\n\r\n    const [autoScroll, setAutoScroll] = useState(true);\r\n\r\n    let messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let event = e.currentTarget;\r\n        if(Math.abs(event.scrollHeight - event.scrollTop - event.clientHeight) < 300) {\r\n            !autoScroll && setAutoScroll(true);\r\n        } else {\r\n            autoScroll && setAutoScroll(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(autoScroll) {messagesAnchorRef.current?.scrollIntoView({behavior: 'auto'})}\r\n    }, [messages])\r\n\r\n    return (\r\n        <div className={style.messagesWrapper}>\r\n            <div className={style.messages} onScroll={scrollHandler}>\r\n                {messages && messages.map((m) => <Message key={m.id} message={m} />)}\r\n                <div ref={messagesAnchorRef}></div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst Message: React.FC<{message: ChatMessageType}> = React.memo(({message}) => {\r\n    console.log('Message<<<<<<')\r\n    return (\r\n        <div className={style.message}>\r\n            <div className={style.info}>\r\n                <NavLink to={'/profile/' + message.userId}><img src={message.photo ? message.photo : userPhoto} alt=\"\"/> <b>{message.userName}</b></NavLink>\r\n            </div>\r\n            <div className={style.text}>\r\n                {message.message}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect\r\n)(Chat);\r\n\r\nconst AddChatMessageForm: React.FC = () => {\r\n\r\n    const [message, setMessage] = useState('');\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const status = useSelector(selectStatus)\r\n\r\n    const onSendMessage = () => {\r\n        if(!message) {\r\n            return;\r\n        } else {\r\n            dispatch(sendMessage(message));\r\n            setMessage('');\r\n        }\r\n    };\r\n\r\n    const onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setMessage(e.currentTarget.value);\r\n    };\r\n\r\n    const onKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if(e.ctrlKey && e.code === 'Enter') {\r\n            onSendMessage();\r\n        }\r\n    }\r\n\r\n    const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n\r\n    const onEmojiButtonClick = () => {\r\n        if(!showEmojiPicker) {\r\n            setShowEmojiPicker(true);\r\n        } else {\r\n            setShowEmojiPicker(false)\r\n        }\r\n    };\r\n\r\n    const [chosenEmoji, setChosenEmoji] = useState<IEmojiData | null>(null);\r\n\r\n    const onEmojiClick = (event: React.MouseEvent<Element, MouseEvent>, emojiObject: IEmojiData) => {\r\n        setChosenEmoji(emojiObject);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(chosenEmoji !== null) {\r\n            setMessage(message+chosenEmoji.emoji);\r\n        }\r\n    }, [chosenEmoji]);\r\n\r\n    return (\r\n        <div className={style.formWrapper}>\r\n            <div className={style.textarea}>\r\n                <textarea value={message} onChange={onMessageChange} placeholder={'Enter your message...'} onKeyPress={onKeyPress}></textarea>\r\n                <div className={style.emoji}>\r\n                    <div className={style.emojiEyes}></div>\r\n                    <div className={style.emojiSmiley}></div>\r\n                    <button  onClick={onEmojiButtonClick} className={classNames(style.emojiButton, {[style.emojiButtonPressed]: showEmojiPicker})}></button>\r\n                </div>\r\n            </div>\r\n            <div className={style.button}>\r\n                <button disabled={status !== 'ready'} onClick={onSendMessage}>Send</button>\r\n            </div>\r\n            {showEmojiPicker &&\r\n                <div className={style.emojiPicker} ><Picker onEmojiClick={onEmojiClick} /></div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n};"],"sourceRoot":""}